import React from "react";
import React, { useState, useCallback } from 'react';\nimport { View, Text, StyleSheet, ScrollView, TextInput, TouchableOpacity, Alert } from 'react-native';\nimport { colors } from '@/constants/colors';\nimport { BloodReport, LabValues, AnthropometricData } from '@/types/bloodReport';\nimport { useBloodReports } from '@/providers/BloodReportProvider';\nimport { AlertTriangle, Activity, TrendingUp, Save, X } from 'lucide-react-native';\n\ninterface BloodReportFormProps {\n  onClose: () => void;\n  editingReport?: BloodReport;\n}\n\ninterface RealTimeAlert {\n  type: 'critical' | 'warning';\n  message: string;\n  parameter: string;\n  value: number;\n}\n\nexport const BloodReportForm: React.FC<BloodReportFormProps> = ({ onClose, editingReport }) => {\n  const { addReport, updateReport } = useBloodReports();\n  \n  const [activeTab, setActiveTab] = useState<'basic' | 'nutrition' | 'advanced' | 'measurements'>('basic');\n  const [date, setDate] = useState(editingReport?.date || new Date().toISOString().split('T')[0]);\n  const [patientType, setPatientType] = useState<'hemodialysis' | 'peritoneal' | 'ckd'>(editingReport?.patientType || 'hemodialysis');\n  const [preHD, setPreHD] = useState<LabValues>(editingReport?.preHD || {});\n  const [postHD, setPostHD] = useState<LabValues>(editingReport?.postHD || {});\n  const [anthropometric, setAnthropometric] = useState<AnthropometricData>(editingReport?.anthropometric || {});\n  const [clinicalNotes, setClinicalNotes] = useState(editingReport?.clinicalNotes || '');\n  const [realTimeAlert, setRealTimeAlert] = useState<RealTimeAlert | null>(null);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const updatePreHD = useCallback((field: keyof LabValues, value: string) => {\n    const numValue = value ? parseFloat(value) : undefined;\n    const updatedValues = { ...preHD, [field]: numValue };\n    setPreHD(updatedValues);\n\n    // Real-time critical value detection\n    if (field === 'potassium' && numValue) {\n      if (numValue > 6.0) {\n        setRealTimeAlert({\n          type: 'critical',\n          message: 'CRITICAL: Potassium >6.0 - Immediate medical attention required',\n          parameter: 'potassium',\n          value: numValue\n        });\n      } else if (numValue < 3.0) {\n        setRealTimeAlert({\n          type: 'critical',\n          message: 'CRITICAL: Potassium <3.0 - Risk of cardiac arrhythmia',\n          parameter: 'potassium',\n          value: numValue\n        });\n      } else if (numValue > 5.5 || numValue < 3.5) {\n        setRealTimeAlert({\n          type: 'warning',\n          message: `WARNING: Potassium ${numValue} is outside normal range (3.5-5.0)`,\n          parameter: 'potassium',\n          value: numValue\n        });\n      } else {\n        setRealTimeAlert(null);\n      }\n    }\n  }, [preHD]);\n\n  const handleSubmit = async () => {\n    if (isSubmitting) return;\n    \n    setIsSubmitting(true);\n    \n    try {\n      const reportData = {\n        date,\n        preHD,\n        postHD,\n        anthropometric,\n        clinicalNotes,\n        patientType,\n        reviewStatus: 'pending' as const\n      };\n\n      if (editingReport) {\n        updateReport(editingReport.id, reportData);\n        Alert.alert('Success', 'Blood report updated successfully');\n      } else {\n        const newReport = addReport(reportData);\n        const alertCount = newReport.analysis?.alerts.length || 0;\n        const recommendationCount = newReport.analysis?.recommendations.length || 0;\n        \n        Alert.alert(\n          'Analysis Complete',\n          `Report saved with ${alertCount} alerts and ${recommendationCount} recommendations`,\n          [{ text: 'OK', onPress: onClose }]\n        );\n      }\n      \n      if (editingReport) {\n        onClose();\n      }\n    } catch (error) {\n      console.error('Error saving report:', error);\n      Alert.alert('Error', 'Failed to save blood report. Please try again.');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const renderLabInput = (label: string, field: keyof LabValues, unit: string, normalRange?: string) => (\n    <View style={styles.inputGroup}>\n      <View style={styles.labelRow}>\n        <Text style={styles.inputLabel}>{label}</Text>\n        {normalRange && <Text style={styles.normalRange}>{normalRange}</Text>}\n      </View>\n      <View style={styles.inputWithUnit}>\n        <TextInput\n          style={styles.input}\n          value={preHD[field]?.toString() || ''}\n          onChangeText={(value) => updatePreHD(field, value)}\n          placeholder=\"0.0\"\n          keyboardType=\"numeric\"\n        />\n        <Text style={styles.unit}>{unit}</Text>\n      </View>\n    </View>\n  );\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.header}>\n        <Text style={styles.title}>\n          {editingReport ? 'Edit Blood Report' : 'New Blood Report'}\n        </Text>\n        <TouchableOpacity onPress={onClose} style={styles.closeButton}>\n          <X size={24} color={colors.text} />\n        </TouchableOpacity>\n      </View>\n\n      {realTimeAlert && (\n        <View style={[\n          styles.alertBanner,\n          realTimeAlert.type === 'critical' ? styles.criticalAlert : styles.warningAlert\n        ]}>\n          <AlertTriangle \n            size={20} \n            color={realTimeAlert.type === 'critical' ? colors.white : colors.warning} \n          />\n          <Text style={[\n            styles.alertText,\n            realTimeAlert.type === 'critical' ? styles.criticalAlertText : styles.warningAlertText\n          ]}>\n            {realTimeAlert.message}\n          </Text>\n        </View>\n      )}\n\n      <View style={styles.basicInfo}>\n        <View style={styles.inputGroup}>\n          <Text style={styles.inputLabel}>Report Date</Text>\n          <TextInput\n            style={styles.input}\n            value={date}\n            onChangeText={setDate}\n            placeholder=\"YYYY-MM-DD\"\n          />\n        </View>\n      </View>\n\n      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>\n        <View style={styles.tabContent}>\n          <Text style={styles.sectionTitle}>Essential Dialysis Monitoring</Text>\n          {renderLabInput('Urea (BUN)', 'urea', 'mg/dL', '20-60')}\n          {renderLabInput('Creatinine', 'creatinine', 'mg/dL', '8-12')}\n          {renderLabInput('Potassium ⚠️', 'potassium', 'mEq/L', '3.5-5.0')}\n          {renderLabInput('Sodium', 'sodium', 'mEq/L', '136-145')}\n          {renderLabInput('Calcium', 'calcium', 'mg/dL', '8.5-10.5')}\n          {renderLabInput('Phosphorus', 'phosphorus', 'mg/dL', '3.5-5.5')}\n          {renderLabInput('Albumin', 'albumin', 'g/dL', '3.5-5.0')}\n          {renderLabInput('Hemoglobin', 'hemoglobin', 'g/dL', '11-12')}\n        </View>\n\n        <View style={styles.notesSection}>\n          <Text style={styles.inputLabel}>Clinical Notes</Text>\n          <TextInput\n            style={styles.notesInput}\n            value={clinicalNotes}\n            onChangeText={setClinicalNotes}\n            placeholder=\"Additional clinical observations, symptoms, or notes...\"\n            multiline\n            numberOfLines={4}\n            textAlignVertical=\"top\"\n          />\n        </View>\n      </ScrollView>\n\n      <View style={styles.footer}>\n        <TouchableOpacity style={styles.cancelButton} onPress={onClose}>\n          <Text style={styles.cancelButtonText}>Cancel</Text>\n        </TouchableOpacity>\n        \n        <TouchableOpacity \n          style={[styles.saveButton, isSubmitting && styles.disabledButton]} \n          onPress={handleSubmit}\n          disabled={isSubmitting}\n        >\n          <Save size={20} color={colors.white} />\n          <Text style={styles.saveButtonText}>\n            {isSubmitting ? 'Analyzing...' : editingReport ? 'Update Report' : 'Generate Analysis'}\n          </Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.background,\n  },\n  header: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    padding: 20,\n    backgroundColor: colors.white,\n    borderBottomWidth: 1,\n    borderBottomColor: colors.border,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold' as const,\n    color: colors.text,\n  },\n  closeButton: {\n    padding: 4,\n  },\n  alertBanner: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 12,\n    marginHorizontal: 16,\n    marginTop: 8,\n    borderRadius: 8,\n    gap: 8,\n  },\n  criticalAlert: {\n    backgroundColor: colors.error,\n  },\n  warningAlert: {\n    backgroundColor: colors.warning + '20',\n    borderWidth: 1,\n    borderColor: colors.warning,\n  },\n  alertText: {\n    flex: 1,\n    fontSize: 14,\n    fontWeight: '600' as const,\n  },\n  criticalAlertText: {\n    color: colors.white,\n  },\n  warningAlertText: {\n    color: colors.warning,\n  },\n  basicInfo: {\n    backgroundColor: colors.white,\n    padding: 16,\n    marginHorizontal: 16,\n    marginTop: 8,\n    borderRadius: 12,\n    gap: 16,\n  },\n  content: {\n    flex: 1,\n    padding: 16,\n  },\n  tabContent: {\n    backgroundColor: colors.white,\n    borderRadius: 12,\n    padding: 16,\n    gap: 16,\n  },\n  sectionTitle: {\n    fontSize: 16,\n    fontWeight: '600' as const,\n    color: colors.text,\n    marginBottom: 8,\n  },\n  inputGroup: {\n    gap: 8,\n  },\n  labelRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n  inputLabel: {\n    fontSize: 14,\n    fontWeight: '500' as const,\n    color: colors.text,\n  },\n  normalRange: {\n    fontSize: 12,\n    color: colors.textSecondary,\n    fontStyle: 'italic' as const,\n  },\n  inputWithUnit: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: colors.background,\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: colors.border,\n  },\n  input: {\n    flex: 1,\n    paddingHorizontal: 12,\n    paddingVertical: 12,\n    fontSize: 16,\n    color: colors.text,\n  },\n  unit: {\n    paddingHorizontal: 12,\n    fontSize: 14,\n    color: colors.textSecondary,\n    fontWeight: '500' as const,\n  },\n  notesSection: {\n    backgroundColor: colors.white,\n    borderRadius: 12,\n    padding: 16,\n    marginTop: 16,\n    gap: 8,\n  },\n  notesInput: {\n    backgroundColor: colors.background,\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: colors.border,\n    padding: 12,\n    fontSize: 16,\n    color: colors.text,\n    minHeight: 100,\n  },\n  footer: {\n    flexDirection: 'row',\n    padding: 16,\n    backgroundColor: colors.white,\n    borderTopWidth: 1,\n    borderTopColor: colors.border,\n    gap: 12,\n  },\n  cancelButton: {\n    flex: 1,\n    paddingVertical: 14,\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: colors.border,\n    alignItems: 'center',\n  },\n  cancelButtonText: {\n    fontSize: 16,\n    fontWeight: '600' as const,\n    color: colors.textSecondary,\n  },\n  saveButton: {\n    flex: 2,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 14,\n    borderRadius: 8,\n    backgroundColor: colors.primary,\n    gap: 8,\n  },\n  disabledButton: {\n    opacity: 0.6,\n  },\n  saveButtonText: {\n    fontSize: 16,\n    fontWeight: '600' as const,\n    color: colors.white,\n  },\n});"