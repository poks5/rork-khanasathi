import React from "react";
import React, { useState } from 'react';\nimport { View, Text, StyleSheet, ScrollView, TouchableOpacity, Modal } from 'react-native';\nimport { colors } from '@/constants/colors';\nimport { useBloodReports } from '@/providers/BloodReportProvider';\nimport { BloodReportForm } from './BloodReportForm';\nimport { Plus, AlertTriangle, TrendingUp, Activity, FileText } from 'lucide-react-native';\n\nexport const LabDashboard: React.FC = () => {\n  const { reports, latestReport, criticalAlerts, recommendationsByPriority, isLoading } = useBloodReports();\n  const [showForm, setShowForm] = useState(false);\n\n  if (isLoading) {\n    return (\n      <View style={styles.loadingContainer}>\n        <Text style={styles.loadingText}>Loading lab reports...</Text>\n      </View>\n    );\n  }\n\n  const renderCriticalAlert = (alert: any, index: number) => (\n    <View key={index} style={styles.criticalAlertCard}>\n      <View style={styles.alertHeader}>\n        <AlertTriangle size={20} color={colors.white} />\n        <Text style={styles.alertTitle}>{alert.parameter.toUpperCase()}</Text>\n        <Text style={styles.alertValue}>{alert.value}</Text>\n      </View>\n      <Text style={styles.alertExplanation}>{alert.explanation}</Text>\n      <Text style={styles.alertAction}>Action: {alert.clinicalSignificance}</Text>\n    </View>\n  );\n\n  const renderRecommendation = (rec: any, index: number) => (\n    <View key={index} style={styles.recommendationCard}>\n      <View style={styles.recHeader}>\n        <View style={[\n          styles.priorityBadge,\n          { backgroundColor: rec.priority === 'critical' ? colors.danger : rec.priority === 'high' ? colors.warning : colors.primary }\n        ]}>\n          <Text style={styles.priorityText}>{rec.priority.toUpperCase()}</Text>\n        </View>\n        <Text style={styles.recTitle}>{rec.title}</Text>\n      </View>\n      <Text style={styles.recDescription}>{rec.description}</Text>\n      {rec.foods && rec.foods.length > 0 && (\n        <View style={styles.foodsSection}>\n          <Text style={styles.foodsTitle}>Foods:</Text>\n          {rec.foods.map((food: string, idx: number) => (\n            <Text key={idx} style={styles.foodItem}>â€¢ {food}</Text>\n          ))}\n        </View>\n      )}\n      {rec.supplements && rec.supplements.length > 0 && (\n        <View style={styles.supplementsSection}>\n          <Text style={styles.supplementsTitle}>Supplements/Actions:</Text>\n          {rec.supplements.map((supp: string, idx: number) => (\n            <Text key={idx} style={styles.supplementItem}>â€¢ {supp}</Text>\n          ))}\n        </View>\n      )}\n      <Text style={styles.evidence}>Evidence: {rec.evidence}</Text>\n    </View>\n  );\n\n  const renderStatsCard = (title: string, value: string, subtitle: string, icon: React.ReactNode, color: string) => (\n    <View style={[styles.statsCard, { borderLeftColor: color }]}>\n      <View style={styles.statsHeader}>\n        {icon}\n        <Text style={styles.statsTitle}>{title}</Text>\n      </View>\n      <Text style={styles.statsValue}>{value}</Text>\n      <Text style={styles.statsSubtitle}>{subtitle}</Text>\n    </View>\n  );\n\n  return (\n    <View style={styles.container}>\n      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>\n        {/* Header Stats */}\n        <View style={styles.statsContainer}>\n          {renderStatsCard(\n            'Total Reports',\n            reports.length.toString(),\n            'Lab reports tracked',\n            <FileText size={20} color={colors.primary} />,\n            colors.primary\n          )}\n          {renderStatsCard(\n            'Critical Alerts',\n            criticalAlerts.length.toString(),\n            'Require attention',\n            <AlertTriangle size={20} color={colors.danger} />,\n            colors.danger\n          )}\n          {renderStatsCard(\n            'High Priority',\n            recommendationsByPriority.high.length.toString(),\n            'Recommendations',\n            <TrendingUp size={20} color={colors.warning} />,\n            colors.warning\n          )}\n        </View>\n\n        {/* Latest Report Summary */}\n        {latestReport && (\n          <View style={styles.latestReportCard}>\n            <Text style={styles.sectionTitle}>Latest Report - {latestReport.date}</Text>\n            <Text style={styles.riskLevel}>\n              Risk Level: <Text style={[\n                styles.riskValue,\n                { color: latestReport.analysis?.overallRisk === 'high' ? colors.danger : \n                         latestReport.analysis?.overallRisk === 'moderate' ? colors.warning : colors.success }\n              ]}>\n                {latestReport.analysis?.overallRisk?.toUpperCase() || 'UNKNOWN'}\n              </Text>\n            </Text>\n            <Text style={styles.summary}>{latestReport.analysis?.summary}</Text>\n          </View>\n        )}\n\n        {/* Critical Alerts */}\n        {criticalAlerts.length > 0 && (\n          <View style={styles.section}>\n            <Text style={styles.sectionTitle}>ðŸš¨ Critical Alerts</Text>\n            {criticalAlerts.map(renderCriticalAlert)}\n          </View>\n        )}\n\n        {/* High Priority Recommendations */}\n        {recommendationsByPriority.critical.length > 0 && (\n          <View style={styles.section}>\n            <Text style={styles.sectionTitle}>âš¡ Critical Recommendations</Text>\n            {recommendationsByPriority.critical.map(renderRecommendation)}\n          </View>\n        )}\n\n        {recommendationsByPriority.high.length > 0 && (\n          <View style={styles.section}>\n            <Text style={styles.sectionTitle}>ðŸ”¥ High Priority Recommendations</Text>\n            {recommendationsByPriority.high.map(renderRecommendation)}\n          </View>\n        )}\n\n        {/* Medium Priority Recommendations */}\n        {recommendationsByPriority.medium.length > 0 && (\n          <View style={styles.section}>\n            <Text style={styles.sectionTitle}>ðŸ“‹ Medium Priority Recommendations</Text>\n            {recommendationsByPriority.medium.slice(0, 3).map(renderRecommendation)}\n            {recommendationsByPriority.medium.length > 3 && (\n              <Text style={styles.moreText}>+{recommendationsByPriority.medium.length - 3} more recommendations</Text>\n            )}\n          </View>\n        )}\n\n        {/* Empty State */}\n        {reports.length === 0 && (\n          <View style={styles.emptyState}>\n            <Activity size={48} color={colors.gray} />\n            <Text style={styles.emptyTitle}>No Lab Reports Yet</Text>\n            <Text style={styles.emptySubtitle}>\n              Add your first blood report to get personalized analysis and recommendations\n            </Text>\n          </View>\n        )}\n      </ScrollView>\n\n      {/* Add Report Button */}\n      <TouchableOpacity \n        style={styles.addButton} \n        onPress={() => setShowForm(true)}\n      >\n        <Plus size={24} color={colors.white} />\n        <Text style={styles.addButtonText}>Add Lab Report</Text>\n      </TouchableOpacity>\n\n      {/* Blood Report Form Modal */}\n      <Modal\n        visible={showForm}\n        animationType=\"slide\"\n        presentationStyle=\"pageSheet\"\n      >\n        <BloodReportForm onClose={() => setShowForm(false)} />\n      </Modal>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.background,\n  },\n  content: {\n    flex: 1,\n    padding: 16,\n  },\n  loadingContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  loadingText: {\n    fontSize: 16,\n    color: colors.textSecondary,\n  },\n  statsContainer: {\n    flexDirection: 'row',\n    gap: 12,\n    marginBottom: 16,\n  },\n  statsCard: {\n    flex: 1,\n    backgroundColor: colors.white,\n    borderRadius: 12,\n    padding: 16,\n    borderLeftWidth: 4,\n  },\n  statsHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    marginBottom: 8,\n  },\n  statsTitle: {\n    fontSize: 12,\n    fontWeight: '500' as const,\n    color: colors.textSecondary,\n  },\n  statsValue: {\n    fontSize: 24,\n    fontWeight: 'bold' as const,\n    color: colors.text,\n    marginBottom: 4,\n  },\n  statsSubtitle: {\n    fontSize: 11,\n    color: colors.textSecondary,\n  },\n  latestReportCard: {\n    backgroundColor: colors.white,\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 16,\n  },\n  section: {\n    marginBottom: 16,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: 'bold' as const,\n    color: colors.text,\n    marginBottom: 12,\n  },\n  riskLevel: {\n    fontSize: 14,\n    color: colors.textSecondary,\n    marginBottom: 8,\n  },\n  riskValue: {\n    fontWeight: 'bold' as const,\n  },\n  summary: {\n    fontSize: 14,\n    color: colors.text,\n    lineHeight: 20,\n  },\n  criticalAlertCard: {\n    backgroundColor: colors.danger,\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 8,\n  },\n  alertHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    marginBottom: 8,\n  },\n  alertTitle: {\n    fontSize: 16,\n    fontWeight: 'bold' as const,\n    color: colors.white,\n    flex: 1,\n  },\n  alertValue: {\n    fontSize: 18,\n    fontWeight: 'bold' as const,\n    color: colors.white,\n  },\n  alertExplanation: {\n    fontSize: 14,\n    color: colors.white,\n    marginBottom: 8,\n    lineHeight: 18,\n  },\n  alertAction: {\n    fontSize: 12,\n    color: colors.white,\n    fontWeight: '500' as const,\n  },\n  recommendationCard: {\n    backgroundColor: colors.white,\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 8,\n  },\n  recHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 12,\n    marginBottom: 8,\n  },\n  priorityBadge: {\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 6,\n  },\n  priorityText: {\n    fontSize: 10,\n    fontWeight: 'bold' as const,\n    color: colors.white,\n  },\n  recTitle: {\n    fontSize: 16,\n    fontWeight: '600' as const,\n    color: colors.text,\n    flex: 1,\n  },\n  recDescription: {\n    fontSize: 14,\n    color: colors.textSecondary,\n    marginBottom: 12,\n    lineHeight: 18,\n  },\n  foodsSection: {\n    marginBottom: 12,\n  },\n  foodsTitle: {\n    fontSize: 12,\n    fontWeight: '600' as const,\n    color: colors.text,\n    marginBottom: 4,\n  },\n  foodItem: {\n    fontSize: 12,\n    color: colors.textSecondary,\n    marginLeft: 8,\n  },\n  supplementsSection: {\n    marginBottom: 12,\n  },\n  supplementsTitle: {\n    fontSize: 12,\n    fontWeight: '600' as const,\n    color: colors.text,\n    marginBottom: 4,\n  },\n  supplementItem: {\n    fontSize: 12,\n    color: colors.textSecondary,\n    marginLeft: 8,\n  },\n  evidence: {\n    fontSize: 11,\n    color: colors.gray,\n    fontStyle: 'italic' as const,\n  },\n  moreText: {\n    fontSize: 12,\n    color: colors.primary,\n    textAlign: 'center',\n    marginTop: 8,\n    fontWeight: '500' as const,\n  },\n  emptyState: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 48,\n  },\n  emptyTitle: {\n    fontSize: 18,\n    fontWeight: '600' as const,\n    color: colors.text,\n    marginTop: 16,\n    marginBottom: 8,\n  },\n  emptySubtitle: {\n    fontSize: 14,\n    color: colors.textSecondary,\n    textAlign: 'center',\n    lineHeight: 20,\n    paddingHorizontal: 32,\n  },\n  addButton: {\n    position: 'absolute',\n    bottom: 24,\n    right: 24,\n    backgroundColor: colors.primary,\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 20,\n    paddingVertical: 14,\n    borderRadius: 28,\n    gap: 8,\n    elevation: 4,\n    shadowColor: colors.text,\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n  },\n  addButtonText: {\n    fontSize: 16,\n    fontWeight: '600' as const,\n    color: colors.white,\n  },\n});"